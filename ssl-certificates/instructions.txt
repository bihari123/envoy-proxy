For testing purposes the command below will generate a self-signed certificate for the domain example.com. This self-signed will cause warning messages about the certificate but is ideal for testing configuration locally. When deploying into production, you will need certificates generated for your site from a service such as Letâ€™s Encrypt.

# Generate Certificate 
The command below creates a new certificate and key within a directory calls certs/. It sets the domain to example.com.

>>>
 mkdir certs; cd certs;
openssl req -nodes -new -x509 \
  -keyout example-com.key -out example-com.crt \
  -days 365 \
  -subj '/CN=example.com/O=My Company Name LTD./C=US';
cd -

you will get the following output:
`Generating a RSA private key
......+++++
.....+++++
writing new private key to 'example-com.key'
`
It will also make a "certs" folder

# Securing Traffic 

To secure HTTP traffic the addition of a tls_context is required as a filter. The TLS context provides the ability to specify a collection of certificates for the domains configured within Envoy Proxy. When an HTTPS request is being processed, the matching certificate will be used.

In this case, the certificates are our self-signed generated in the first step.

# Add TLS Context to HTTPS Listener 

Open the envoy.yaml file. It contains an outline of the required HTTPS support. It has two listeners configured, one on the port 8080 for the HTTP traffic and another on 8443 for HTTPS traffic.

The HTTPS listeners has HTTP Connection Manager defined that will proxy incoming requests for the /service/1 and /service/2 endpoints. This needs to be extended to include the required tls_context as shown below.

 transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_certificates:
            - certificate_chain: {filename: "/etc/envoy/certs/example-com.crt"}
              private_key: {filename: "/etc/envoy/certs/example-com.key"}
            validation_context:
              trusted_ca:
                filename: certs/cacert.pem
